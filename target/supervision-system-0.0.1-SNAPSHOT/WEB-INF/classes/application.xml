<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:tx="http://www.springframework.org/schema/tx" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:aop="http://www.springframework.org/schema/aop" 
xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/tx/spring-tx.xsd">    

    <!-- 在使用mybatis时 spring使用sqlsessionFactoryBean 来管理mybatis的sqlsessionFactory -->
    <!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>  
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="typeAliasesPackage" value="xmu.sspo.model" />
    </bean>
  
    <!-- 开启注解配置 即Autowried -->
	<!-- <context:annotation-config/> -->
	<!--其实component-scan 就有了annotation-config的功能即把需要的类注册到了spring容器中
	<context:component-scan base-package="com.website.service" /> -->
	
    <!-- 自动扫描注解的bean -->
    <context:component-scan base-package="xmu.sspo.service" />
    
    <!-- 加载配置JDBC文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName">
					<value>${jdbc.driverClassName}</value>
			</property>
			<property name="url">
					<value>${jdbc.url}</value>
			</property>
			<property name="username">
					<value>${jdbc.username}</value>
			</property>
			<property name="password">
					<value>${jdbc.password}</value>
			</property>
	</bean>
 
		

	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> <constructor-arg index="0"> <ref bean="sqlSessionFactory"/> 
			</constructor-arg> </bean> -->

	<!--动态代理实现 不用写dao的实现 -->
	<bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->
			<property name="basePackage" value="xmu.sspo.dao" />
			<!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->
			<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
			<!--直接指定了sqlsessionTemplate名称，这个和上面的其实是一样的 -->
			<!-- <property name="sqlSessionTemplateBeanName" value="sqlSession" /> -->
	</bean>

	<!--事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用全注释事务-->
	<tx:annotation-driven transaction-manager="transactionManager" /> 
    

</beans>